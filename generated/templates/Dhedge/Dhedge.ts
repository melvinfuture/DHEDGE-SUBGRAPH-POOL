// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AssetAdded extends ethereum.Event {
  get params(): AssetAdded__Params {
    return new AssetAdded__Params(this);
  }
}

export class AssetAdded__Params {
  _event: AssetAdded;

  constructor(event: AssetAdded) {
    this._event = event;
  }

  get fundAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get manager(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get assetKey(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class AssetRemoved extends ethereum.Event {
  get params(): AssetRemoved__Params {
    return new AssetRemoved__Params(this);
  }
}

export class AssetRemoved__Params {
  _event: AssetRemoved;

  constructor(event: AssetRemoved) {
    this._event = event;
  }

  get fundAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get manager(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get assetKey(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get fundAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get investor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get valueDeposited(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get fundTokensReceived(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalInvestorFundTokens(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get fundValue(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get totalSupply(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class Exchange extends ethereum.Event {
  get params(): Exchange__Params {
    return new Exchange__Params(this);
  }
}

export class Exchange__Params {
  _event: Exchange;

  constructor(event: Exchange) {
    this._event = event;
  }

  get fundAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get manager(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sourceKey(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get sourceAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get destinationKey(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get destinationAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class ManagerFeeMinted extends ethereum.Event {
  get params(): ManagerFeeMinted__Params {
    return new ManagerFeeMinted__Params(this);
  }
}

export class ManagerFeeMinted__Params {
  _event: ManagerFeeMinted;

  constructor(event: ManagerFeeMinted) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get manager(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get available(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get daoFee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get managerFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get tokenPriceAtLastFeeMint(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class ManagerFeeSet extends ethereum.Event {
  get params(): ManagerFeeSet__Params {
    return new ManagerFeeSet__Params(this);
  }
}

export class ManagerFeeSet__Params {
  _event: ManagerFeeSet;

  constructor(event: ManagerFeeSet) {
    this._event = event;
  }

  get fundAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get manager(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get numerator(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get denominator(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ManagerUpdated extends ethereum.Event {
  get params(): ManagerUpdated__Params {
    return new ManagerUpdated__Params(this);
  }
}

export class ManagerUpdated__Params {
  _event: ManagerUpdated;

  constructor(event: ManagerUpdated) {
    this._event = event;
  }

  get newManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newManagerName(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class PoolPrivacyUpdated extends ethereum.Event {
  get params(): PoolPrivacyUpdated__Params {
    return new PoolPrivacyUpdated__Params(this);
  }
}

export class PoolPrivacyUpdated__Params {
  _event: PoolPrivacyUpdated;

  constructor(event: PoolPrivacyUpdated) {
    this._event = event;
  }

  get isPoolPrivate(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdrawal extends ethereum.Event {
  get params(): Withdrawal__Params {
    return new Withdrawal__Params(this);
  }
}

export class Withdrawal__Params {
  _event: Withdrawal;

  constructor(event: Withdrawal) {
    this._event = event;
  }

  get fundAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get investor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get valueWithdrawn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get fundTokensWithdrawn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalInvestorFundTokens(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get fundValue(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get totalSupply(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class DHedge__getFundSummaryResult {
  value0: string;
  value1: BigInt;
  value2: BigInt;
  value3: Address;
  value4: string;
  value5: BigInt;
  value6: boolean;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;

  constructor(
    value0: string,
    value1: BigInt,
    value2: BigInt,
    value3: Address,
    value4: string,
    value5: BigInt,
    value6: boolean,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    return map;
  }
}

export class DHedge__getFundCompositionResult {
  value0: Array<Bytes>;
  value1: Array<BigInt>;
  value2: Array<BigInt>;

  constructor(
    value0: Array<Bytes>,
    value1: Array<BigInt>,
    value2: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytesArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    return map;
  }
}

export class DHedge__getWaitingPeriodsResult {
  value0: Array<Bytes>;
  value1: Array<BigInt>;

  constructor(value0: Array<Bytes>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytesArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class DHedge__getSuspendedAssetsResult {
  value0: Array<Bytes>;
  value1: Array<boolean>;

  constructor(value0: Array<Bytes>, value1: Array<boolean>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytesArray(this.value0));
    map.set("value1", ethereum.Value.fromBooleanArray(this.value1));
    return map;
  }
}

export class DHedge__getManagerFeeResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DHedge__getExitFeeResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DHedge extends ethereum.SmartContract {
  static bind(address: Address): DHedge {
    return new DHedge("DHedge", address);
  }

  addressResolver(): Address {
    let result = super.call(
      "addressResolver",
      "addressResolver():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_addressResolver(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "addressResolver",
      "addressResolver():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  assetPosition(param0: Bytes): BigInt {
    let result = super.call(
      "assetPosition",
      "assetPosition(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBigInt();
  }

  try_assetPosition(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "assetPosition",
      "assetPosition(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  creationTime(): BigInt {
    let result = super.call("creationTime", "creationTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_creationTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("creationTime", "creationTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  creator(): Address {
    let result = super.call("creator", "creator():(address)", []);

    return result[0].toAddress();
  }

  try_creator(): ethereum.CallResult<Address> {
    let result = super.tryCall("creator", "creator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMembers(): Array<Address> {
    let result = super.call("getMembers", "getMembers():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getMembers(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getMembers", "getMembers():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isMemberAllowed(member: Address): boolean {
    let result = super.call(
      "isMemberAllowed",
      "isMemberAllowed(address):(bool)",
      [ethereum.Value.fromAddress(member)]
    );

    return result[0].toBoolean();
  }

  try_isMemberAllowed(member: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isMemberAllowed",
      "isMemberAllowed(address):(bool)",
      [ethereum.Value.fromAddress(member)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastDeposit(param0: Address): BigInt {
    let result = super.call("lastDeposit", "lastDeposit(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_lastDeposit(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastDeposit",
      "lastDeposit(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  managerName(): string {
    let result = super.call("managerName", "managerName():(string)", []);

    return result[0].toString();
  }

  try_managerName(): ethereum.CallResult<string> {
    let result = super.tryCall("managerName", "managerName():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  numberOfMembers(): BigInt {
    let result = super.call(
      "numberOfMembers",
      "numberOfMembers():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_numberOfMembers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberOfMembers",
      "numberOfMembers():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  persistentAsset(param0: Bytes): boolean {
    let result = super.call(
      "persistentAsset",
      "persistentAsset(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBoolean();
  }

  try_persistentAsset(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "persistentAsset",
      "persistentAsset(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  privatePool(): boolean {
    let result = super.call("privatePool", "privatePool():(bool)", []);

    return result[0].toBoolean();
  }

  try_privatePool(): ethereum.CallResult<boolean> {
    let result = super.tryCall("privatePool", "privatePool():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportedAssets(param0: BigInt): Bytes {
    let result = super.call(
      "supportedAssets",
      "supportedAssets(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBytes();
  }

  try_supportedAssets(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "supportedAssets",
      "supportedAssets(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenPriceAtLastFeeMint(): BigInt {
    let result = super.call(
      "tokenPriceAtLastFeeMint",
      "tokenPriceAtLastFeeMint():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_tokenPriceAtLastFeeMint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenPriceAtLastFeeMint",
      "tokenPriceAtLastFeeMint():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getAssetProxy(key: Bytes): Address {
    let result = super.call(
      "getAssetProxy",
      "getAssetProxy(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(key)]
    );

    return result[0].toAddress();
  }

  try_getAssetProxy(key: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAssetProxy",
      "getAssetProxy(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(key)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isAssetSupported(key: Bytes): boolean {
    let result = super.call(
      "isAssetSupported",
      "isAssetSupported(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(key)]
    );

    return result[0].toBoolean();
  }

  try_isAssetSupported(key: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAssetSupported",
      "isAssetSupported(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(key)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  validateAsset(key: Bytes): boolean {
    let result = super.call("validateAsset", "validateAsset(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(key)
    ]);

    return result[0].toBoolean();
  }

  try_validateAsset(key: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "validateAsset",
      "validateAsset(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(key)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  numberOfSupportedAssets(): BigInt {
    let result = super.call(
      "numberOfSupportedAssets",
      "numberOfSupportedAssets():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_numberOfSupportedAssets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberOfSupportedAssets",
      "numberOfSupportedAssets():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalFundValue(): BigInt {
    let result = super.call("totalFundValue", "totalFundValue():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalFundValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalFundValue",
      "totalFundValue():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  assetValue(key: Bytes): BigInt {
    let result = super.call("assetValue", "assetValue(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(key)
    ]);

    return result[0].toBigInt();
  }

  try_assetValue(key: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("assetValue", "assetValue(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(key)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deposit(_susdAmount: BigInt): BigInt {
    let result = super.call("deposit", "deposit(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_susdAmount)
    ]);

    return result[0].toBigInt();
  }

  try_deposit(_susdAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("deposit", "deposit(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_susdAmount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFundSummary(): DHedge__getFundSummaryResult {
    let result = super.call(
      "getFundSummary",
      "getFundSummary():(string,uint256,uint256,address,string,uint256,bool,uint256,uint256,uint256,uint256)",
      []
    );

    return new DHedge__getFundSummaryResult(
      result[0].toString(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toString(),
      result[5].toBigInt(),
      result[6].toBoolean(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt()
    );
  }

  try_getFundSummary(): ethereum.CallResult<DHedge__getFundSummaryResult> {
    let result = super.tryCall(
      "getFundSummary",
      "getFundSummary():(string,uint256,uint256,address,string,uint256,bool,uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DHedge__getFundSummaryResult(
        value[0].toString(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toString(),
        value[5].toBigInt(),
        value[6].toBoolean(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt()
      )
    );
  }

  getSupportedAssets(): Array<Bytes> {
    let result = super.call(
      "getSupportedAssets",
      "getSupportedAssets():(bytes32[])",
      []
    );

    return result[0].toBytesArray();
  }

  try_getSupportedAssets(): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getSupportedAssets",
      "getSupportedAssets():(bytes32[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getFundComposition(): DHedge__getFundCompositionResult {
    let result = super.call(
      "getFundComposition",
      "getFundComposition():(bytes32[],uint256[],uint256[])",
      []
    );

    return new DHedge__getFundCompositionResult(
      result[0].toBytesArray(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray()
    );
  }

  try_getFundComposition(): ethereum.CallResult<
    DHedge__getFundCompositionResult
  > {
    let result = super.tryCall(
      "getFundComposition",
      "getFundComposition():(bytes32[],uint256[],uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DHedge__getFundCompositionResult(
        value[0].toBytesArray(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray()
      )
    );
  }

  getWaitingPeriods(): DHedge__getWaitingPeriodsResult {
    let result = super.call(
      "getWaitingPeriods",
      "getWaitingPeriods():(bytes32[],uint256[])",
      []
    );

    return new DHedge__getWaitingPeriodsResult(
      result[0].toBytesArray(),
      result[1].toBigIntArray()
    );
  }

  try_getWaitingPeriods(): ethereum.CallResult<
    DHedge__getWaitingPeriodsResult
  > {
    let result = super.tryCall(
      "getWaitingPeriods",
      "getWaitingPeriods():(bytes32[],uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DHedge__getWaitingPeriodsResult(
        value[0].toBytesArray(),
        value[1].toBigIntArray()
      )
    );
  }

  getSuspendedAssets(): DHedge__getSuspendedAssetsResult {
    let result = super.call(
      "getSuspendedAssets",
      "getSuspendedAssets():(bytes32[],bool[])",
      []
    );

    return new DHedge__getSuspendedAssetsResult(
      result[0].toBytesArray(),
      result[1].toBooleanArray()
    );
  }

  try_getSuspendedAssets(): ethereum.CallResult<
    DHedge__getSuspendedAssetsResult
  > {
    let result = super.tryCall(
      "getSuspendedAssets",
      "getSuspendedAssets():(bytes32[],bool[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DHedge__getSuspendedAssetsResult(
        value[0].toBytesArray(),
        value[1].toBooleanArray()
      )
    );
  }

  tokenPrice(): BigInt {
    let result = super.call("tokenPrice", "tokenPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenPrice", "tokenPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  availableManagerFee(): BigInt {
    let result = super.call(
      "availableManagerFee",
      "availableManagerFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_availableManagerFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "availableManagerFee",
      "availableManagerFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getManagerFee(): DHedge__getManagerFeeResult {
    let result = super.call(
      "getManagerFee",
      "getManagerFee():(uint256,uint256)",
      []
    );

    return new DHedge__getManagerFeeResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getManagerFee(): ethereum.CallResult<DHedge__getManagerFeeResult> {
    let result = super.tryCall(
      "getManagerFee",
      "getManagerFee():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DHedge__getManagerFeeResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  getExitFee(): DHedge__getExitFeeResult {
    let result = super.call("getExitFee", "getExitFee():(uint256,uint256)", []);

    return new DHedge__getExitFeeResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getExitFee(): ethereum.CallResult<DHedge__getExitFeeResult> {
    let result = super.tryCall(
      "getExitFee",
      "getExitFee():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DHedge__getExitFeeResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  getExitFeeCooldown(): BigInt {
    let result = super.call(
      "getExitFeeCooldown",
      "getExitFeeCooldown():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getExitFeeCooldown(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getExitFeeCooldown",
      "getExitFeeCooldown():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getExitFeeRemainingCooldown(sender: Address): BigInt {
    let result = super.call(
      "getExitFeeRemainingCooldown",
      "getExitFeeRemainingCooldown(address):(uint256)",
      [ethereum.Value.fromAddress(sender)]
    );

    return result[0].toBigInt();
  }

  try_getExitFeeRemainingCooldown(
    sender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getExitFeeRemainingCooldown",
      "getExitFeeRemainingCooldown(address):(uint256)",
      [ethereum.Value.fromAddress(sender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddMemberCall extends ethereum.Call {
  get inputs(): AddMemberCall__Inputs {
    return new AddMemberCall__Inputs(this);
  }

  get outputs(): AddMemberCall__Outputs {
    return new AddMemberCall__Outputs(this);
  }
}

export class AddMemberCall__Inputs {
  _call: AddMemberCall;

  constructor(call: AddMemberCall) {
    this._call = call;
  }

  get member(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddMemberCall__Outputs {
  _call: AddMemberCall;

  constructor(call: AddMemberCall) {
    this._call = call;
  }
}

export class AddMembersCall extends ethereum.Call {
  get inputs(): AddMembersCall__Inputs {
    return new AddMembersCall__Inputs(this);
  }

  get outputs(): AddMembersCall__Outputs {
    return new AddMembersCall__Outputs(this);
  }
}

export class AddMembersCall__Inputs {
  _call: AddMembersCall;

  constructor(call: AddMembersCall) {
    this._call = call;
  }

  get members(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddMembersCall__Outputs {
  _call: AddMembersCall;

  constructor(call: AddMembersCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ChangeManagerCall extends ethereum.Call {
  get inputs(): ChangeManagerCall__Inputs {
    return new ChangeManagerCall__Inputs(this);
  }

  get outputs(): ChangeManagerCall__Outputs {
    return new ChangeManagerCall__Outputs(this);
  }
}

export class ChangeManagerCall__Inputs {
  _call: ChangeManagerCall;

  constructor(call: ChangeManagerCall) {
    this._call = call;
  }

  get newManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newManagerName(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ChangeManagerCall__Outputs {
  _call: ChangeManagerCall;

  constructor(call: ChangeManagerCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RemoveMemberCall extends ethereum.Call {
  get inputs(): RemoveMemberCall__Inputs {
    return new RemoveMemberCall__Inputs(this);
  }

  get outputs(): RemoveMemberCall__Outputs {
    return new RemoveMemberCall__Outputs(this);
  }
}

export class RemoveMemberCall__Inputs {
  _call: RemoveMemberCall;

  constructor(call: RemoveMemberCall) {
    this._call = call;
  }

  get member(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveMemberCall__Outputs {
  _call: RemoveMemberCall;

  constructor(call: RemoveMemberCall) {
    this._call = call;
  }
}

export class RemoveMembersCall extends ethereum.Call {
  get inputs(): RemoveMembersCall__Inputs {
    return new RemoveMembersCall__Inputs(this);
  }

  get outputs(): RemoveMembersCall__Outputs {
    return new RemoveMembersCall__Outputs(this);
  }
}

export class RemoveMembersCall__Inputs {
  _call: RemoveMembersCall;

  constructor(call: RemoveMembersCall) {
    this._call = call;
  }

  get members(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class RemoveMembersCall__Outputs {
  _call: RemoveMembersCall;

  constructor(call: RemoveMembersCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _privatePool(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get _manager(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _managerName(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _fundName(): string {
    return this._call.inputValues[4].value.toString();
  }

  get _addressResolver(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _supportedAssets(): Array<Bytes> {
    return this._call.inputValues[6].value.toBytesArray();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class SetPoolPrivateCall extends ethereum.Call {
  get inputs(): SetPoolPrivateCall__Inputs {
    return new SetPoolPrivateCall__Inputs(this);
  }

  get outputs(): SetPoolPrivateCall__Outputs {
    return new SetPoolPrivateCall__Outputs(this);
  }
}

export class SetPoolPrivateCall__Inputs {
  _call: SetPoolPrivateCall;

  constructor(call: SetPoolPrivateCall) {
    this._call = call;
  }

  get _privatePool(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPoolPrivateCall__Outputs {
  _call: SetPoolPrivateCall;

  constructor(call: SetPoolPrivateCall) {
    this._call = call;
  }
}

export class AddToSupportedAssetsCall extends ethereum.Call {
  get inputs(): AddToSupportedAssetsCall__Inputs {
    return new AddToSupportedAssetsCall__Inputs(this);
  }

  get outputs(): AddToSupportedAssetsCall__Outputs {
    return new AddToSupportedAssetsCall__Outputs(this);
  }
}

export class AddToSupportedAssetsCall__Inputs {
  _call: AddToSupportedAssetsCall;

  constructor(call: AddToSupportedAssetsCall) {
    this._call = call;
  }

  get key(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class AddToSupportedAssetsCall__Outputs {
  _call: AddToSupportedAssetsCall;

  constructor(call: AddToSupportedAssetsCall) {
    this._call = call;
  }
}

export class RemoveFromSupportedAssetsCall extends ethereum.Call {
  get inputs(): RemoveFromSupportedAssetsCall__Inputs {
    return new RemoveFromSupportedAssetsCall__Inputs(this);
  }

  get outputs(): RemoveFromSupportedAssetsCall__Outputs {
    return new RemoveFromSupportedAssetsCall__Outputs(this);
  }
}

export class RemoveFromSupportedAssetsCall__Inputs {
  _call: RemoveFromSupportedAssetsCall;

  constructor(call: RemoveFromSupportedAssetsCall) {
    this._call = call;
  }

  get key(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RemoveFromSupportedAssetsCall__Outputs {
  _call: RemoveFromSupportedAssetsCall;

  constructor(call: RemoveFromSupportedAssetsCall) {
    this._call = call;
  }
}

export class ExchangeCall extends ethereum.Call {
  get inputs(): ExchangeCall__Inputs {
    return new ExchangeCall__Inputs(this);
  }

  get outputs(): ExchangeCall__Outputs {
    return new ExchangeCall__Outputs(this);
  }
}

export class ExchangeCall__Inputs {
  _call: ExchangeCall;

  constructor(call: ExchangeCall) {
    this._call = call;
  }

  get sourceKey(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get sourceAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get destinationKey(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ExchangeCall__Outputs {
  _call: ExchangeCall;

  constructor(call: ExchangeCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _susdAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _fundTokenAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class ForfeitSuspendedSynthsAndWithdrawCall extends ethereum.Call {
  get inputs(): ForfeitSuspendedSynthsAndWithdrawCall__Inputs {
    return new ForfeitSuspendedSynthsAndWithdrawCall__Inputs(this);
  }

  get outputs(): ForfeitSuspendedSynthsAndWithdrawCall__Outputs {
    return new ForfeitSuspendedSynthsAndWithdrawCall__Outputs(this);
  }
}

export class ForfeitSuspendedSynthsAndWithdrawCall__Inputs {
  _call: ForfeitSuspendedSynthsAndWithdrawCall;

  constructor(call: ForfeitSuspendedSynthsAndWithdrawCall) {
    this._call = call;
  }

  get _fundTokenAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ForfeitSuspendedSynthsAndWithdrawCall__Outputs {
  _call: ForfeitSuspendedSynthsAndWithdrawCall;

  constructor(call: ForfeitSuspendedSynthsAndWithdrawCall) {
    this._call = call;
  }
}

export class MintManagerFeeCall extends ethereum.Call {
  get inputs(): MintManagerFeeCall__Inputs {
    return new MintManagerFeeCall__Inputs(this);
  }

  get outputs(): MintManagerFeeCall__Outputs {
    return new MintManagerFeeCall__Outputs(this);
  }
}

export class MintManagerFeeCall__Inputs {
  _call: MintManagerFeeCall;

  constructor(call: MintManagerFeeCall) {
    this._call = call;
  }
}

export class MintManagerFeeCall__Outputs {
  _call: MintManagerFeeCall;

  constructor(call: MintManagerFeeCall) {
    this._call = call;
  }
}

export class SetManagerFeeNumeratorCall extends ethereum.Call {
  get inputs(): SetManagerFeeNumeratorCall__Inputs {
    return new SetManagerFeeNumeratorCall__Inputs(this);
  }

  get outputs(): SetManagerFeeNumeratorCall__Outputs {
    return new SetManagerFeeNumeratorCall__Outputs(this);
  }
}

export class SetManagerFeeNumeratorCall__Inputs {
  _call: SetManagerFeeNumeratorCall;

  constructor(call: SetManagerFeeNumeratorCall) {
    this._call = call;
  }

  get numerator(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetManagerFeeNumeratorCall__Outputs {
  _call: SetManagerFeeNumeratorCall;

  constructor(call: SetManagerFeeNumeratorCall) {
    this._call = call;
  }
}
